1. Draw and Explain Compilation Steps:

- Draw a diagram showing:
	- Source Code → Preprocessor → Compiler → Linker → Executable
	
		Source code (.cpp, .h): Contains the code
		|
		v
		preprocessor: Converts the code files into "translation units". 
					  It expands the directives (e.g. #include, #define) included headers and macros.
					  Creates one large c++ file.	
		|
		v
		compiler (.o, .obj): Translates preprocessed code assembly code. 
							 Checks for syntax and type errors.
							 Performs optimizations. 
							 Converts assembly code into object files. 
							 Contains code sections, data sections and symbol table with unresolved references.
		|
		v 
		linker: Resolves external symbols. 
                Merges object files and links libraries into one executable binary.
		|
		v
		executable

2. Identify Potantial Errors in each step

	Preprocessor: Missing header, undefined macro
	Compiler: Syntax error, type mismatch, missing return 
	Linker: Undefined reference, missing library

3. Text Editor project conceptual design

	Modules: 
		- Buffer: Handles storing text and lines in memory. 
		- Logger: Handles logigging events and errors. 
		- FileManager: Handles file operations e.g. reading and writing.
		- Main: Initializing modules and main loop.
